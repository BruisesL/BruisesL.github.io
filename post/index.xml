<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on BruisesL&#39;s blog</title>
    <link>https://bruisesl.github.io/post/</link>
    <description>Recent content in Posts on BruisesL&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Wed, 01 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bruisesl.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面向对象</title>
      <link>https://bruisesl.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>面向对象 面向对象：面向对象(Object Oriented)是软件开发方法，一种编程范式。把数据及对数据的操作方法放在一起，作为一个相互依存的整体——对象。对同类对象抽象出其共性，形成类。类中的大多数数据，只能用本类的方法进行处理。类通过一个简单的外部接口与外界发生关系，对象与对象之间通过消息进行通信。程序流程由用户在使用中决定。对象即为人对各种具体物体抽象后的一个概念，人们每天都要接触各种各样的对象，如手机就是一个对象。
   项目名称 面向对象程序设计 面向过程程序设计（也叫结构化编程）     定义 面向对象顾名思义就是把现实中的事务都抽象成为程序设计中的“对象”，其基本思想是一切皆对象，是一种“自下而上”的设计语言，先设计组件，再完成拼装。 面向过程是“自上而下”的设计语言，先定好框架，再增砖添瓦。通俗点，就是先定好main()函数，然后再逐步实现mian()函数中所要用到的其他方法。   特点 封装、继承、多态 算法+数据结构   优势 适用于大型复杂系统，方便复用、 适用于简单系统，容易理解   劣势 比较抽象、性能比面向过程低 难以应对复杂系统，难以复用，不易维护、不易扩展   对比 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护 性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux/Unix等一般采用面向过程开发，性能是最重要的因素。   设计语言 Java、Smalltalk、EIFFEL、C++、Objective-、C#、Python等 C、Fortran    面向对象的基本特性
  **唯一：**每个对象都有自身唯一的标识，通过这种标识，可找到相应的对象。在对象的整个生命期中，它的标识都不改变，不同的对象不能有相同的标识。
  **抽象：**抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。
  **继承：**继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。
继承性是面向对象程序设计语言不同于其它语言的最重要的特点，是其他语言所没有的。
在类层次中，子类只继承一个父类的数据结构和方法，则称为单重继承。
在类层次中，子类继承了多个父类的数据结构和方法，则称为多重继承，Java仅支持单继承，C++支持均支持。
在软件开发中，类的继承性使所建立的软件具有开放性、可扩充性，这是信息组织与分类的行之有效的方法，它简化了对象、类的创建工作量，增加了代码的可重用性。
  **多态：**多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。
多态性允许每个对象以适合自身的方式去响应共同的消息。
多态性增强了软件的灵活性和重用性。
  类与对象 类(Class) 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</description>
    </item>
    
    <item>
      <title>Java 方法详解</title>
      <link>https://bruisesl.github.io/post/java-%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/java-%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>Java 方法详解 什么是方法 Java 方法是语句的集合，他们在一起执行一个功能
  方法是解决一类问题的步骤的 有序组合
  方法包含于 类 或 对象 中
  方法在程序中被创建，在其他地方被引用
  System.out.printLn() //System类 里的标准 对象out 中的 方法printLn() **设计方法的原则：**方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，即一个方法只完成一个功能，这样利于我们后期的扩展。
public class Demo { //main方法  public static void main(String[] args) { int sum = add(1,2); System.out.println(sum); System.out.println(&amp;#34;=====================&amp;#34;); test(); } //加法  public static int add(int a,int b){ return a + b; } public static void test(){ int i = 0; while (i &amp;lt; 10) { i++; System.</description>
    </item>
    
    <item>
      <title>Java 流程控制</title>
      <link>https://bruisesl.github.io/post/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>用户交互Scanner 之前学习的基本语法中并没有实现程序和人的交互，Java提供了一个工具类，可以获取用户的输入。java.util.Scanner是Java5的新特征，可以通过Scanner类来获取用户的输入。
  语法
Scanner s = new Scanner(System.in)   通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext() 与 hasNextLine() 判断是否还有输入的数据。
public class Demo01 { public static void main(String[] args) { //创建一个扫描器对象，用于接收键盘数据  Scanner scanner = new Scanner(System.in); System.out.println(&amp;#34;使用next方法接收：&amp;#34;); //判断用户是否输入字符串  if (scanner.hasNext()){ //使用next方式接收  String str = scanner.next(); System.out.println(&amp;#34;输入的内容为：&amp;#34;+str); } //凡事属于IO流的类，如果不关会一直占用资源  scanner.close(); } } tips：
  next():
  一定要读取到有效字符后才可以结束输入
  对输入有效字符前遇到的空白，next() 方法会自动将其去掉</description>
    </item>
    
    <item>
      <title>Java 基础语法</title>
      <link>https://bruisesl.github.io/post/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>注释  Java中注释有三种：单行注释、多行注释、文档注释  public class HelloWorld { public static void main(String[] args) { // 单行注释  System.out.println(&amp;#34;Hello,World!&amp;#34;); // 输出一个HelloWorld  /* * 多行注释, * 可以注释一段文字 */ /* 文档注释：JavaDoc /**回车 * 用法： * 1.用在类的外面，用于对类解释说明 * 2.写在方法上面，对方法解释说明 * 3.解释说明成员变量 */ /** * @Description HelloWorld * @Author BruisesL */ } } 标识符 Java所有的组成部分都需要名字。类名、变量名、以及方法名都被称为标识符。
  所有的标识符都应该以 字母(A-Z 或者 a-z)、美元符($)、下划线(_) 开始
  首字符之后可以是 字母(A-Z 或者 a-z)、美元符($)、下划线(_) 或数字的任何字符 组合
  不能使用关键字作为变量名或方法名
  标识符是大小写敏感的</description>
    </item>
    
    <item>
      <title>Java 基础介绍</title>
      <link>https://bruisesl.github.io/post/java-%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/java-%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/</guid>
      <description>Jave的诞生   1972年C诞生
优点：贴近硬件，运行极快，效率极高
开发：操作系统，编译器，数据库，网络系统等
问题：指针和内存管理
  1982年C++诞生
特点：面对对象
优点：兼容C
开发：图形领域、游戏等
  1995年Java诞生
特点：语法像C，没有指针和内存管理，具有真正的可以执行（编写一次，到处运行），面向对象，类型安全，高质量的类库
要求：需要安装JVM（Java虚拟机）
产品：
Java2标准版(J2SE):占领桌面
Java2移动版(J2ME):占领手机
Java2企业版(J2EE):占领服务器
基于Java开发的平台，系统，工具：
 构建工具：Ant，Maven，Jekins 应用服务器：Tomcat，Jetty，Jboss，Websphere，Weblogic Web开发：Struts，Spring，Hibernate，myBatis 开发工具：Eclipse，Netbean，intellij idea，Jbuilder 大数据领域：Hadoop 手机端：Android    Java的特性和优势 简单性（C++语法纯净版，无头文件，无指针运算）
面向对象（重点放在对象以及对象之间的接口上，以人的思维写程序）
可移植性（可跨平台移植）
高性能（即时编译，效率接近C++）
分布式（为网络分布式所设计，可通过URL访问网络资源）
动态性（反射机制）
多线程（带来更好的交互性能）
安全性（可构建防病毒，防篡改的系统，由于去除了内存与指针的管理，Java在运行前检查内存）
健壮性
Java的三大版本 JavaSE：标准版（桌面程序、控制台开发） JavaME：嵌入式开发（手机端，小家电，目前基本不会使用） JavaEE：企业级开发（web端、服务器开发）
JDK、JRE、JVM JDK : Java Development Kit （Java开发工具）
JRE : Java Runtime Environment （Java运行环境）
JVM : Java Virtual Machine （Java虚拟机）
Java开发环境搭建   JDK下载、安装与卸载</description>
    </item>
    
    <item>
      <title>计算机基础</title>
      <link>https://bruisesl.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</guid>
      <description>计算机的构成   计算机由硬件+软件构成
  硬件的构成为冯诺依曼体系结构，最简单的组成为CPU、内存、主板
  软件的构成分为系统软件和应用软件
  系统软件:DOS (Disk Operating System) , Windows, Linux, Mac, Android, IOS
  应用软件:WPS, QQ, 微信等
  冯诺依曼体系结构  I/O设备(input/output设备)：即输入输出设备，输入设备例如键盘、鼠标，输出设备例如显示器、音响等 CPU主要由运算器和控制器组成 运算：数据由输入设备进入存储器，存储器将数据传入运算器进行运算，在得出结果后返回存储器，存储器再将数据通过输出设备输出。  计算机语言发展史 第一代语言&amp;ndash;机器语言  计算机的基本计算方式是基于二进制的方式  第二代语言&amp;ndash;汇编语言  解决人类无法读懂机器语言的问题 指令替代二进制  第三代语言&amp;ndash;高级语言  大体分为：面向过程和面向对象两大类 C语言是面向过程的语言，C++、Java是面向对象的语言  </description>
    </item>
    
    <item>
      <title>DOS命令</title>
      <link>https://bruisesl.github.io/post/dos%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/dos%E5%91%BD%E4%BB%A4/</guid>
      <description>#盘符切换  C: #查看当前目录下的所有文件  dir #切换目录 cd (change directory)实例目录为F盘下user文件夹 跨盘符切换 cd /d f:\user 返回上一级 cd .. 进入目录 cd user #清理屏幕  cls (clear screen) #退出终端  exit #查看电脑ip  ipconfig #ping 命令（获取网站ip） ping www.baidu.com #打开电脑工具（直接输入软件名称缩写） clac 计算器 mspaint 画图 notepad 记事本 #文件操作 md test 创建文件夹（文件夹名称tese） cd&amp;gt;a.txt 创建文件（文件为名字是a的txt文件） del a.txt 删除文件 rd test 删除文件夹（需进入有该文件夹的目录再进行删除，且文件夹需要为空） </description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://bruisesl.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数组 「数组 Array」是一种将 相同类型元素 存储在 连续内存空间 的数据结构，将元素在数组中的位置称为元素的「索引 Index」。
  数组名 ：数组的名字
  数组元素：就是存放在数组里面的数据
  数组索引：就是数组里面连续存储空间的编号，从0开始。而从0开始的原因是根据地址计算公式，索引本质上表示的是内存地址偏移量，首个元素的地址偏移量是 0 ，所以索引值也是 0 。
  length ：数组的属性长度，数组名.length拿到数组的长度
    数组的声明：数据类型[] 数组名
int[] ages; // 声明一个int类型的数组ages，数组内元素均为int类型 String[] names；// 声明一个String类型的数组names，数组内元素均为String类型 // 也可以用 int ages[]声明，但是不推荐   数组的赋值与取值：
数组在定义后，必须**初始化「赋值」**才能使用。所谓初始化，就是在堆内存中给数组分配存储空间，并为每一 个元素赋上初始值，有两种方式：
  动态创建：
**语法 ：**数据类型[] 数组名 = new 数据类型[长度] ，长度不能为负数，默认是int类型，最大就是int最大值。
int[] arr1 = new int[3]; // 动态创建了一个int类型的数组arr1，长度3   静态创建：
**语法：**第一个方式是常用方式，第二个方式作为了解。
数据类型[] 数组名 = {值1, 值2, 值3&amp;hellip;.</description>
    </item>
    
    <item>
      <title>算法</title>
      <link>https://bruisesl.github.io/post/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/%E7%AE%97%E6%B3%95/</guid>
      <description>算法   算法定义：
「算法 Algorithm」是在有限时间内解决问题的一组指令或操作步骤。算法具有以下特性：
 问题是明确的，需要拥有明确的输入和输出定义。 解具有确定性，即给定相同输入时，输出一定相同。 具有可行性，可在有限步骤、有限时间、有限内存空间下完成。 独立于编程语言，即可用多种语言实现。      数据结构定义：
「数据结构 Data Structure」是在计算机中组织与存储数据的方式。为了提高数据存储和操作性能，数据结构的设计原则有：
 空间占用尽可能小，节省计算机内存。 数据操作尽量快，包括数据访问、添加、删除、更新等。 提供简洁的数据表示和逻辑信息，以便算法高效运行。  数据结构的设计是一个充满权衡的过程，这意味着如果获得某方面的优势，则往往需要在另一方面做出妥协。例如，链表相对于数组，数据添加删除操作更加方便，但牺牲了数据的访问速度；图相对于链表，提供了更多的逻辑信息，但需要占用更多的内存空间。
  数据结构与算法的关系：
「数据结构」与「算法」是高度相关、紧密嵌合的，体现在：
  数据结构是算法的底座。数据结构为算法提供结构化存储的数据，以及操作数据的对应方法。
  算法是发挥数据结构优势的舞台。数据结构仅存储数据信息，结合算法才可解决特定问题。
  算法有对应最优的数据结构。给定算法，一般可基于不同的数据结构实现，而最终执行效率往往相差很大。
    复杂度分析 算法效率评估 算法的设计目标是什么，或者说，如何来评判算法的好与坏。整体上看，我们设计算法时追求两个层面的目标：找到问题解法 与 寻求最优解法。
算法效率则是主要评价维度，包括：
  时间效率，即算法的运行速度的快慢。
  空间效率，即算法占用的内存空间大小。
  注：大多数情况下，时间都是比空间更宝贵的，只要空间复杂度不要太离谱、能接受就行，因此以空间换时间最为常用。
  效率评估方法&amp;ndash;实际测试
假设我们现在有算法 A 和 算法 B ，都能够解决同一问题，现在需要对比两个算法之间的效率。最直接的方式，就是找一台计算机，把两个算法都完整跑一遍，并监控记录运行时间和内存占用情况。这种评估方式能够反映真实情况，但是也存在弊端：
  难以排除测试环境的干扰因素。硬件配置会影响到算法的性能表现。例如，在某台计算机中，算法 A 比算法 B 运行时间更短；但换到另一台配置不同的计算机中，可能会得到相反的测试结果。这意味着我们需要在各种机器上展开测试，而这是不现实的。</description>
    </item>
    
    <item>
      <title>开发软件使用相关</title>
      <link>https://bruisesl.github.io/post/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</guid>
      <description>eclipse的使用   **介绍：**Eclipse 是一个开放源代码的、基于 Java 的可扩展开发平台。eclipse 附带了一个标准的插件集，包括Java 开发工具 Java Developmment Rit, JDk。eclipse 是一个可以提高开发效率的工具。 可自动编译Java文件，简化运行流程。创建 类 管理项目方式更为简单直观。但是现在使用eclipse的企业很少，大多数企业选择使用IDEA进行开发。
  **区域：**左侧工作栏用于创建项目与管理文件，右侧区域用于编写代码，上方选择框最右侧可以选择编写语言。
  **使用：**点击左侧创建项目，创建成功后新建类，输入类的名称并选择类及方法的类型，确认后即可编写。
  </description>
    </item>
    
    <item>
      <title>问题及解决办法</title>
      <link>https://bruisesl.github.io/post/%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bruisesl.github.io/post/%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>Mac删除launchpad中无法正常移除的图标 **场景：**网页中下载dmg安装后，卸载了finder/application内对应程序，但launchpad内仍然存在对应图标，且无法删除。
解决办法：
  找到com.apple.dock.launchpad文件夹
打开一个folder，按command+shift+G，在前往当中输入地址/private/var/folders，然后在里边自己尝试找到com.apple.dock.launchpad这个文件夹
  找到数据库，获取其路径
打开com.apple.dock.launchpad 文件夹
之后有一个db文件夹，再点进去有一个文件叫db,它就是要找的数据库。
查看db文件简介，复制对应路径，注意从private开始。
  开始对数据库进行操作
打开终端，切换盘符至复制路径。
然后输入： sqlite3 db &amp;quot;delete from apps where title=&#39;应用名称&#39;;&amp;quot;&amp;amp;&amp;amp;killall Dock
注意要将应用名称处替换成要删除的图标的名称，然后回车即可。
  permission denied (publickey)问题的解决方法 **场景：**上时间未远端登陆git，导致ssh key过期，git push 失败报错：Permission denied (publickey)
**解决办法：**重新生成一个新的ssh key ，然后将这个ssh key添加到github账户上面。
 检查SSH key是否已经存在  ls ~/.ssh/ 进行检查 id_rsa.pub 是否存在，如果存在，就不用生成一个新的SSH key了，直接跳到下面的第3步。
生成一个新的SSH key  切换盘符至 .ssh 文件
cd /Users/your_user_name/.ssh 输入命令（其中 your_email@example.com 替换成个人邮箱地址）：
ssh-keygen -t rsa -b 2048 -C &amp;quot;your_email@example.</description>
    </item>
    
  </channel>
</rss>
